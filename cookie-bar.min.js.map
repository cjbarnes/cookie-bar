{"version":3,"sources":["cookie-bar.js"],"names":["ready","fn","document","readyState","addEventListener","attachEvent","el","eventName","handler","e","call","getCookie","c_name","i","x","y","ARRcookies","cookie","split","length","substr","indexOf","replace","unescape","display","html","element","createElement","className","innerHTML","button","querySelector","preventDefault","returnValue","setCookie","style","body","insertBefore","firstChild","value","exdays","exdate","Date","setDate","getDate","c_value","escape","toUTCString","checkCookie","cookieName","cookieChk"],"mappings":";;;;;;;CAQA,WAOE,QAASA,GAAMC,GACc,WAAvBC,SAASC,WACXF,IACSC,SAASE,iBAClBF,SAASE,iBAAiB,mBAAoBH,GAE9CC,SAASG,YAAY,qBAAsB,WACd,WAAvBH,SAASC,YACXF,MAaR,QAASG,GAAiBE,EAAIC,EAAWC,GACnCF,EAAGF,iBACLE,EAAGF,iBAAiBG,EAAWC,GAE/BF,EAAGD,YAAY,KAAOE,EAAW,SAASE,GACxCD,EAAQE,KAAKJ,EAAIG,KAUvB,QAASE,GAAUC,GACjB,GAAIC,GAAGC,EAAGC,EAAGC,EAAad,SAASe,OAAOC,MAAM,IAEhD,KAAKL,EAAI,EAAGA,EAAIG,EAAWG,OAAQN,IAMjC,GAJAC,EAAIE,EAAWH,GAAGO,OAAO,EAAGJ,EAAWH,GAAGQ,QAAQ,MAClDN,EAAIC,EAAWH,GAAGO,OAAOJ,EAAWH,GAAGQ,QAAQ,KAAO,GACtDP,EAAIA,EAAEQ,QAAQ,aAAc,IAExBR,GAAKF,EACP,MAAOW,UAASR,GAUtB,QAASS,KAGP,GAAIC,GAAO,EACXA,IAAQ,4LACRA,GAAQ,qCACRA,GAAQ,+DACRA,GAAQ,iFACRA,GAAQ,WAGR,IAAIC,GAAUxB,SAASyB,cAAc,MACrCD,GAAQE,UAAY,aACpBF,EAAQG,UAAYJ,CAEpB,IAAIK,GAASJ,EAAQK,cAAc,qBAMnC3B,GAAiB0B,EAAQ,QAAS,SAAqBrB,GACjD,mBAAuBA,GAAEuB,eAC3BvB,EAAEuB,iBAEFvB,EAAEwB,aAAc,EAIlBC,EAAU,gBAAiB,KAAM,KAGjChC,SAAS6B,cAAc,eAAeI,MAAMX,QAAU,SAKxDtB,SAASkC,KAAKC,aAAaX,EAASxB,SAASkC,KAAKE,YAUpD,QAASJ,GAAUtB,EAAQ2B,EAAOC,GAG9B,GAAIC,GAAS,GAAIC,KACjBD,GAAOE,QAAQF,EAAOG,UAAYJ,EAGlC,IAAIK,GAAUC,OAAOP,IAAqB,MAAVC,EAAkB,GAAK,aAAeC,EAAOM,cAAgB,WAG7F7C,UAASe,OAASL,EAAS,IAAMiC,EAQrC,QAASG,KACL,GAAIC,GAAa,gBACbC,EAAYvC,EAAUsC,IAGtB,MAAQC,GAAa,KAAOA,IAC9B1B,IAMNxB,EAAMgD","file":"cookie-bar.min.js","sourcesContent":["/**\n * Cookie warning script - to comply with EU cookie law. A modified version of\n * Scott Herbert and Dimitri Kourkoulis’s original.\n * @link https://github.com/cjbarnes/cookie-bar\n * @author cJ barnes http://www.cjbarnes.co.uk\n * @license LGPL 3.0\n */\n\n(function cookieBar() {\n\n  /**\n   * Vanilla JavaScript version of jQuery.ready, with IE8+ support.\n   * @link http://youmightnotneedjquery.com/#ready\n   * @param {Function} fn The function to call on DOM ready.\n   */\n  function ready(fn) {\n    if (document.readyState != 'loading'){\n      fn();\n    } else if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', fn);\n    } else {\n      document.attachEvent('onreadystatechange', function(e) {\n        if (document.readyState != 'loading')\n          fn();\n      });\n    }\n  }\n\n  /**\n   * Vanilla JavaScript version of jQuery.on, with IE8+ support.\n   * Abstracts around IE.old's missing `addEventListener` support.\n   * @link http://youmightnotneedjquery.com/#on\n   * @param {Element}  el        Element the event listener will attach to.\n   * @param {String}   eventName Name of event to listen for.\n   * @param {Function} handler   Function to call when event occurs.\n   */\n  function addEventListener(el, eventName, handler) {\n    if (el.addEventListener) {\n      el.addEventListener(eventName, handler);\n    } else {\n      el.attachEvent('on' + eventName, function(e){\n        handler.call(el, e);\n      });\n    }\n  }\n\n  /**\n   * Get the currently set cookie with a specified name.\n   * @param  {String} c_name The cookie name to check for\n   * @return {String}        The named cookie’s contents\n   */\n  function getCookie(c_name) {\n    var i, x, y, ARRcookies = document.cookie.split(\";\");\n\n    for (i = 0; i < ARRcookies.length; i++) {\n\n      x = ARRcookies[i].substr(0, ARRcookies[i].indexOf(\"=\"));\n      y = ARRcookies[i].substr(ARRcookies[i].indexOf(\"=\") + 1);\n      x = x.replace(/^\\s+|\\s+$/g, \"\");\n\n      if (x == c_name) {\n        return unescape(y);\n      }\n\n    }\n\n  }\n\n  /**\n   * Show the cookie message bar to the user.\n   */\n  function display() {\n\n    // Prep the cookie bar HTML.\n    var html = '';\n    html += '\\t<p class=\"cookie-bar-description\">This website stores cookies on your computer in order to function correctly. The cookies do not contain any specific information about&nbsp;you.</p>\\n';\n    html += '\\t<div class=\"cookie-bar-action\">\\n';\n    html += '\\t\\t<a class=\"cookie-bar-button\" href=\"#\">OK</a>&nbsp;&nbsp;\\n';\n    html += '\\t\\t<a class=\"cookie-bar-link\" href=\"/about/terms\">Find&nbsp;out&nbsp;more</a>\\n';\n    html += '\\t</div>\\n';\n\n    // Create the cookie bar elements.\n    var element = document.createElement('div');\n    element.className = 'cookie-bar';\n    element.innerHTML = html;\n\n    var button = element.querySelector('.cookie-bar-button');\n    /**\n     * Click event for OK button - set a \"user has agreed to cookies\" cookie\n     * and hide the cookies warning.\n     * @param {Object} e Event object.\n     */\n    addEventListener(button, 'click', function cookieBarOk(e) {\n      if ('undefined' !== typeof e.preventDefault) {\n        e.preventDefault();\n      } else { // IE8 equivalent of preventDefault.\n        e.returnValue = false;\n      }\n\n      // Create the cookie\n      setCookie(\"jsCookieCheck\", null, 365);\n\n      // Hide the cookie warning.\n      document.querySelector('.cookie-bar').style.display = 'none';\n\n    });\n\n    // Display.\n    document.body.insertBefore(element, document.body.firstChild);\n\n  }\n\n  /**\n   * Abstracted function to set a new cookie.\n   * @param {String} c_name Name of new cookie\n   * @param {String} value  Contents of new cookie\n   * @param {Number} exdays Number of days before cookie should expire\n   */\n  function setCookie(c_name, value, exdays) {\n\n      // Calculate expiration date\n      var exdate = new Date();\n      exdate.setDate(exdate.getDate() + exdays);\n\n      // Setup the full cookie contents\n      var c_value = escape(value) + ((exdays == null) ? \"\" : \"; expires=\" + exdate.toUTCString() + \"; path=/\");\n\n      // Write the new cookie\n      document.cookie = c_name + \"=\" + c_value;\n\n  }\n\n  /**\n   * Initializing function. Checks for the presence of an agreement cookie and,\n   * if it doesn’t exist, displays the cookie notification.\n   */\n  function checkCookie() {\n      var cookieName = \"jsCookieCheck\";\n      var cookieChk = getCookie(cookieName);\n\n      // Display the notification if no cookie exists\n      if (null == cookieChk || \"\" === cookieChk) {\n        display();\n      }\n\n  }\n\n  // Begin on DOM ready\n  ready(checkCookie);\n\n})();\n"],"sourceRoot":"/source/"}